{"/home/travis/build/npmtest/node-npmtest-grunt-gh-pages/test.js":"/* istanbul instrument in package npmtest_grunt_gh_pages */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-gh-pages/lib.npmtest_grunt_gh_pages.js":"/* istanbul instrument in package npmtest_grunt_gh_pages */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_grunt_gh_pages = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_grunt_gh_pages = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-gh-pages/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-grunt-gh-pages && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_grunt_gh_pages */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_grunt_gh_pages\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_grunt_gh_pages.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_grunt_gh_pages.rollup.js'] =\n            local.assetsDict['/assets.npmtest_grunt_gh_pages.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_grunt_gh_pages.__dirname + '/lib.npmtest_grunt_gh_pages.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-gh-pages/node_modules/grunt-gh-pages/Gruntfile.js":"/**\n * @param {Object} grunt Grunt.\n */\nmodule.exports = function(grunt) {\n\n  var tasksSrc = 'tasks/**/*.js';\n  var testSrc = 'test/**/*.js';\n  var fixturesSrc = 'test/fixtures/**/*.js';\n\n  grunt.initConfig({\n    cafemocha: {\n      options: {\n        reporter: 'spec'\n      },\n      all: {\n        src: testSrc,\n        newer: true\n      }\n    },\n    watch: {\n      tasks: {\n        files: tasksSrc,\n        tasks: ['cafemocha']\n      },\n      test: {\n        files: testSrc,\n        tasks: ['cafemocha']\n      },\n      fixtures: {\n        files: fixturesSrc,\n        tasks: ['cafemocha']\n      }\n    }\n  });\n\n  grunt.loadNpmTasks('grunt-cafe-mocha');\n  grunt.loadNpmTasks('grunt-contrib-watch');\n\n  grunt.registerTask('test', ['cafemocha']);\n\n  grunt.registerTask('default', ['test']);\n\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-gh-pages/node_modules/grunt-gh-pages/lib/git.js":"var cp = require('child_process');\nvar path = require('path');\nvar util = require('util');\n\nvar Q = require('q');\nvar fs = require('q-io/fs');\n\nvar git = 'git';\n\n\n/**\n * @constructor\n * @param {number} code Error code.\n * @param {string} message Error message.\n */\nfunction ProcessError(code, message) {\n  var callee = arguments.callee;\n  Error.apply(this, [message]);\n  Error.captureStackTrace(this, callee);\n  this.code = code;\n  this.message = message;\n  this.name = callee.name;\n}\nutil.inherits(ProcessError, Error);\n\n\n/**\n * Execute a git command.\n * @param {Array.<string>} args Arguments (e.g. ['remote', 'update']).\n * @param {string} cwd Repository directory.\n * @return {Promise} A promise.  The promise will be resolved with the exit code\n *     or rejected with an error.  To get stdout, use a progress listener (e.g.\n *     `promise.progress(function(chunk) {console.log(String(chunk);}))`).\n */\nexports = module.exports = function(args, cwd) {\n  return spawn(git, args, cwd);\n};\n\n\n/**\n * Set the Git executable to be used by exported methods (defaults to 'git').\n * @param {string} exe Git executable (full path if not already on path).\n */\nexports.exe = function(exe) {\n  git = exe;\n};\n\n\n/**\n * Util function for handling spawned processes as promises.\n * @param {string} exe Executable.\n * @param {Array.<string>} args Arguments.\n * @param {string} cwd Working directory.\n * @return {Promise} A promise.\n */\nfunction spawn(exe, args, cwd) {\n  var deferred = Q.defer();\n  var child = cp.spawn(exe, args, {cwd: cwd || process.cwd()});\n  var buffer = [];\n  child.stderr.on('data', function(chunk) {\n    buffer.push(chunk.toString());\n  });\n  child.stdout.on('data', function(chunk) {\n    deferred.notify(chunk);\n  });\n  child.on('close', function(code) {\n    if (code) {\n      var msg = buffer.join('') || 'Process failed: ' + code;\n      deferred.reject(new ProcessError(code, msg));\n    } else {\n      deferred.resolve(code);\n    }\n  });\n  return deferred.promise;\n}\n\n\n/**\n * Initialize repository.\n * @param {string} cwd Repository directory.\n * @return {ChildProcess} Child process.\n */\nexports.init = function init(cwd) {\n  return spawn(git, ['init'], cwd);\n};\n\n\n/**\n * Clone a repo into the given dir if it doesn't already exist.\n * @param {string} repo Repository URL.\n * @param {string} dir Target directory.\n * @param {string} branch Branch name.\n * @param {options} options All options.\n * @return {Promise} A promise.\n */\nexports.clone = function clone(repo, dir, branch, options) {\n  return fs.exists(dir).then(function(exists) {\n    if (exists) {\n      return Q.resolve();\n    } else {\n      return fs.makeTree(path.dirname(path.resolve(dir))).then(function() {\n        var args = ['clone', repo, dir, '--branch', branch, '--single-branch'];\n        if (options.depth) {\n          args.push('--depth', options.depth);\n        }\n        return spawn(git, args).fail(function(err) {\n          // try again without banch options\n          return spawn(git, ['clone', repo, dir]);\n        });\n      });\n    }\n  });\n};\n\n\n/**\n * Clean up unversioned files.\n * @param {string} cwd Repository directory.\n * @return {Promise} A promise.\n */\nvar clean = exports.clean = function clean(cwd) {\n  return spawn(git, ['clean', '-f', '-d'], cwd);\n};\n\n\n/**\n * Hard reset to remote/branch\n * @param {string} remote Remote alias.\n * @param {string} branch Branch name.\n * @param {string} cwd Repository directory.\n * @return {Promise} A promise.\n */\nvar reset = exports.reset = function reset(remote, branch, cwd) {\n  return spawn(git, ['reset', '--hard', remote + '/' + branch], cwd);\n};\n\n\n/**\n * Fetch from a remote.\n * @param {string} remote Remote alias.\n * @param {string} cwd Repository directory.\n * @return {Promise} A promise.\n */\nexports.fetch = function fetch(remote, cwd) {\n  return spawn(git, ['fetch', remote], cwd);\n};\n\n\n/**\n * Checkout a branch (create an orphan if it doesn't exist on the remote).\n * @param {string} remote Remote alias.\n * @param {string} branch Branch name.\n * @param {string} cwd Repository directory.\n * @return {Promise} A promise.\n */\nexports.checkout = function checkout(remote, branch, cwd) {\n  var treeish = remote + '/' + branch;\n  return spawn(git, ['ls-remote', '--exit-code', '.', treeish], cwd)\n      .then(function() {\n        // branch exists on remote, hard reset\n        return spawn(git, ['checkout', branch], cwd)\n            .then(function() {\n              return clean(cwd);\n            })\n            .then(function() {\n              return reset(remote, branch, cwd);\n            });\n      }, function(error) {\n        if (error instanceof ProcessError && error.code === 2) {\n          // branch doesn't exist, create an orphan\n          return spawn(git, ['checkout', '--orphan', branch], cwd);\n        } else {\n          // unhandled error\n          return Q.reject(error);\n        }\n      });\n};\n\n\n/**\n * Remove all unversioned files.\n * @param {string} files Files argument.\n * @param {string} cwd Repository directory.\n * @return {Promise} A promise.\n */\nexports.rm = function rm(files, cwd) {\n  return spawn(git, ['rm', '--ignore-unmatch', '-r', '-f', files], cwd);\n};\n\n\n/**\n * Add files.\n * @param {string} files Files argument.\n * @param {string} cwd Repository directory.\n * @return {Promise} A promise.\n */\nexports.add = function add(files, cwd) {\n  return spawn(git, ['add', files], cwd);\n};\n\n\n/**\n * Commit.\n * @param {string} message Commit message.\n * @param {string} cwd Repository directory.\n * @return {Promise} A promise.\n */\nexports.commit = function commit(message, cwd) {\n  return spawn(git, ['diff-index', '--quiet', 'HEAD', '.'], cwd)\n      .then(function() {\n        // nothing to commit\n        return Q.resolve();\n      })\n      .fail(function() {\n        return spawn(git, ['commit', '-m', message], cwd);\n      });\n};\n\n\n/**\n * Add tag\n * @param {string} tag Name of tag.\n * @param {string} cwd Repository directory.\n * @return {Promise} A promise.\n */\nexports.tag = function tag(tag, cwd) {\n  return spawn(git, ['tag', tag], cwd);\n};\n\n\n/**\n * Push a branch.\n * @param {string} remote Remote alias.\n * @param {string} branch Branch name.\n * @param {string} cwd Repository directory.\n * @return {Promise} A promise.\n */\nexports.push = function push(remote, branch, cwd) {\n  return spawn(git, ['push', '--tags', remote, branch], cwd);\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-gh-pages/node_modules/grunt-gh-pages/lib/util.js":"var path = require('path');\n\nvar async = require('async');\nvar fs = require('graceful-fs');\nvar Q = require('q');\n\n\n/**\n * Generate a list of unique directory paths given a list of file paths.\n * @param {Array.<string>} files List of file paths.\n * @return {Array.<string>} List of directory paths.\n */\nvar uniqueDirs = exports.uniqueDirs = function(files) {\n  var dirs = {};\n  files.forEach(function(filepath) {\n    var parts = path.dirname(filepath).split(path.sep);\n    var partial = parts[0];\n    dirs[partial] = true;\n    for (var i = 1, ii = parts.length; i < ii; ++i) {\n      partial = path.join(partial, parts[i]);\n      dirs[partial] = true;\n    }\n  });\n  return Object.keys(dirs);\n};\n\n\n/**\n * Sort function for paths.  Sorter paths come first.  Paths of equal length are\n * sorted alphanumerically in path segment order.\n * @param {string} a First path.\n * @param {string} b Second path.\n * @return {number} Comparison.\n */\nvar byShortPath = exports.byShortPath = function(a, b) {\n  var aParts = a.split(path.sep);\n  var bParts = b.split(path.sep);\n  var aLength = aParts.length;\n  var bLength = bParts.length;\n  var cmp = 0;\n  if (aLength < bLength) {\n    cmp = -1;\n  } else if (aLength > bLength) {\n    cmp = 1;\n  } else {\n    var aPart, bPart;\n    for (var i = 0; i < aLength; ++i) {\n      aPart = aParts[i];\n      bPart = bParts[i];\n      if (aPart < bPart) {\n        cmp = -1;\n        break;\n      } else if (aPart > bPart) {\n        cmp = 1;\n        break;\n      }\n    }\n  }\n  return cmp;\n};\n\n\n/**\n * Generate a list of directories to create given a list of file paths.\n * @param {Array.<string>} files List of file paths.\n * @return {Array.<string>} List of directory paths ordered by path length.\n */\nvar dirsToCreate = exports.dirsToCreate = function(files) {\n  return uniqueDirs(files).sort(byShortPath);\n};\n\n\n/**\n * Copy a file.\n * @param {Object} obj Object with src and dest properties.\n * @param {function(Error)} callback Callback\n */\nvar copyFile = exports.copyFile = function(obj, callback) {\n  var called = false;\n  function done(err) {\n    if (!called) {\n      called = true;\n      callback(err);\n    }\n  }\n\n  var read = fs.createReadStream(obj.src);\n  read.on('error', function(err) {\n    done(err);\n  });\n\n  var write = fs.createWriteStream(obj.dest);\n  write.on('error', function(err) {\n    done(err);\n  });\n  write.on('close', function(ex) {\n    done();\n  });\n\n  read.pipe(write);\n};\n\n\n/**\n * Make directory, ignoring errors if directory already exists.\n * @param {string} path Directory path.\n * @param {function(Error)} callback Callback.\n */\nfunction makeDir(path, callback) {\n  fs.mkdir(path, function(err) {\n    if (err) {\n      // check if directory exists\n      fs.stat(path, function(err2, stat) {\n        if (err2 || !stat.isDirectory()) {\n          callback(err);\n        } else {\n          callback();\n        }\n      });\n    } else {\n      callback();\n    }\n  });\n}\n\n\n/**\n * Copy a list of files.\n * @param {Array.<string>} files Files to copy.\n * @param {string} base Base directory.\n * @param {string} dest Destination directory.\n * @return {Promise} A promise.\n */\nexports.copy = function(files, base, dest) {\n  var deferred = Q.defer();\n\n  var pairs = [];\n  var destFiles = [];\n  files.forEach(function(file) {\n    var src = path.resolve(base, file);\n    var relative = path.relative(base, src);\n    var target = path.join(dest, relative);\n    pairs.push({\n      src: src,\n      dest: target\n    });\n    destFiles.push(target);\n  });\n\n  async.eachSeries(dirsToCreate(destFiles), makeDir, function(err) {\n    if (err) {\n      return deferred.reject(err);\n    }\n    async.each(pairs, copyFile, function(err) {\n      if (err) {\n        return deferred.reject(err);\n      } else {\n        return deferred.resolve();\n      }\n    });\n  });\n\n  return deferred.promise;\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-gh-pages/node_modules/grunt-gh-pages/tasks/gh-pages.js":"var Q = require('q');\nvar copy = require('../lib/util').copy;\nvar fse = require('fs-extra');\nvar git = require('../lib/git');\nvar path = require('path');\nvar pkg = require('../package.json');\nvar urlSafe = require('url-safe');\n\nfunction getCacheDir() {\n  return path.join('.grunt', pkg.name);\n}\n\nfunction getRemoteUrl(dir, remote) {\n  var repo;\n  return git(['config', '--get', 'remote.' + remote + '.url'], dir)\n      .progress(function(chunk) {\n        repo = String(chunk).split(/[\\n\\r]/).shift();\n      })\n      .then(function() {\n        if (repo) {\n          return Q.resolve(repo);\n        } else {\n          return Q.reject(new Error(\n              'Failed to get repo URL from options or current directory.'));\n        }\n      })\n      .fail(function(err) {\n        return Q.reject(new Error(\n            'Failed to get remote.origin.url (task must either be run in a ' +\n            'git repository with a configured origin remote or must be ' +\n            'configured with the \"repo\" option).'));\n      });\n}\n\nfunction getRepo(options) {\n  if (options.repo) {\n    return Q.resolve(options.repo);\n  } else {\n    return getRemoteUrl(process.cwd(), 'origin');\n  }\n}\n\n\n/** @param {Object} grunt Grunt. */\nmodule.exports = function(grunt) {\n\n  grunt.registerMultiTask('gh-pages', 'Publish to gh-pages.', function() {\n\n    var src;\n    var data = this.data;\n    var kind = grunt.util.kindOf(data);\n    if (kind === 'string') {\n      src = [data];\n    } else if (kind === 'array') {\n      src = data;\n    } else if (kind === 'object') {\n      if (!('src' in data)) {\n        grunt.fatal(new Error('Required \"src\" property missing.'));\n      }\n      src = data.src;\n    } else {\n      grunt.fatal(new Error('Unexpected config: ' + String(data)));\n    }\n\n    var defaults = {\n      add: false,\n      git: 'git',\n      clone: path.join(getCacheDir(), this.name, this.target),\n      dotfiles: false,\n      branch: 'gh-pages',\n      remote: 'origin',\n      base: process.cwd(),\n      only: '.',\n      push: true,\n      message: 'Updates',\n      silent: false\n    };\n\n    // override defaults with any task options\n    var options = this.options(defaults);\n\n    // allow command line options to override\n    var value;\n    for (var option in defaults) {\n      value = grunt.option(pkg.name + '-' + option);\n      if (value !== undefined) {\n        options[option] = value;\n      }\n    }\n\n    if (!grunt.file.isDir(options.base)) {\n      grunt.fatal(new Error('The \"base\" option must be an existing directory'));\n    }\n\n    var files = grunt.file.expand({\n      filter: 'isFile',\n      cwd: options.base,\n      dot: options.dotfiles\n    }, src);\n\n    if (!Array.isArray(files) || files.length === 0) {\n      grunt.fatal(new Error('Files must be provided in the \"src\" property.'));\n    }\n\n    var only = grunt.file.expand({cwd: options.base}, options.only);\n\n    var done = this.async();\n\n    function log(message) {\n      if (!options.silent) {\n        grunt.log.writeln(message);\n      }\n    }\n\n    git.exe(options.git);\n\n    var repoUrl;\n    getRepo(options)\n        .then(function(repo) {\n          repoUrl = repo;\n          log('Cloning ' + urlSafe(repo, '[secure]') + ' into ' + options.clone);\n          return git.clone(repo, options.clone, options.branch, options);\n        })\n        .then(function() {\n          return getRemoteUrl(options.clone, options.remote)\n              .then(function(url) {\n                if (url !== repoUrl) {\n                  var message = 'Remote url mismatch.  Got \"' + url + '\" ' +\n                      'but expected \"' + repoUrl + '\" in ' + options.clone +\n                      '.  If you have changed your \"repo\" option, try ' +\n                      'running `grunt gh-pages-clean` first.';\n                  return Q.reject(new Error(message));\n                } else {\n                  return Q.resolve();\n                }\n              });\n        })\n        .then(function() {\n          // only required if someone mucks with the checkout between builds\n          log('Cleaning');\n          return git.clean(options.clone);\n        })\n        .then(function() {\n          log('Fetching ' + options.remote);\n          return git.fetch(options.remote, options.clone);\n        })\n        .then(function() {\n          log('Checking out ' + options.remote + '/' +\n              options.branch);\n          return git.checkout(options.remote, options.branch,\n              options.clone);\n        })\n        .then(function() {\n          if (!options.add) {\n            log('Removing files');\n            return git.rm(only.join(' '), options.clone);\n          } else {\n            return Q.resolve();\n          }\n        })\n        .then(function() {\n          log('Copying files');\n          return copy(files, options.base, options.clone);\n        })\n        .then(function() {\n          log('Adding all');\n          return git.add('.', options.clone);\n        })\n        .then(function() {\n          if (options.user) {\n            return git(['config', 'user.email', options.user.email],\n                options.clone)\n                .then(function() {\n                  return git(['config', 'user.name', options.user.name],\n                      options.clone);\n                });\n          } else {\n            return Q.resolve();\n          }\n        })\n        .then(function() {\n          log('Committing');\n          return git.commit(options.message, options.clone);\n        })\n        .then(function() {\n          if (options.tag) {\n            log('Tagging');\n            var deferred = Q.defer();\n            git.tag(options.tag, options.clone)\n              .then(function() {\n                return deferred.resolve();\n              })\n              .fail(function(error) {\n                // tagging failed probably because this tag alredy exists\n                log('Tagging failed, continuing');\n                grunt.log.debug(error);\n                return deferred.resolve();\n              });\n            return deferred.promise;\n          } else {\n            return Q.resolve();\n          }\n        })\n        .then(function() {\n          if (options.push) {\n            log('Pushing');\n            return git.push(options.remote, options.branch,\n                options.clone);\n          } else {\n            return Q.resolve();\n          }\n        })\n        .then(function() {\n          done();\n        }, function(error) {\n          if (options.silent) {\n            error = new Error(\n                'Unspecified error (run without silent option for detail)');\n          }\n          done(error);\n        }, function(progress) {\n          grunt.verbose.writeln(progress);\n        });\n  });\n\n  grunt.registerTask('gh-pages-clean', 'Clean cache dir', function() {\n    fse.removeSync(getCacheDir());\n  });\n\n};\n"}